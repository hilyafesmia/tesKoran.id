import Head from "next/head";
import { useState, useEffect, useReducer } from "react";
import styles from "../styles/Home.module.css";

const ACTIONS = {
  INCREMENT: "increment",
};

export async function getServerSideProps() {
  return {
    props: {
      numbers: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
    },
  };
}

function reducer(state, action) {
  switch (action.type) {
    case ACTIONS.INCREMENT:
      return { ...state, active: state.active + 1 };
    default:
      return state;
  }
}

export default function Home({ numbers }) {
  const [state, dispatch] = useReducer(reducer, {
    active: 0,
    numbersLength: numbers.length,
  });

  useEffect(() => {
    console.log("used");
    window.addEventListener("keydown", (e) => keyDown(e));
    return () => {
      console.log("cleaned");
      window.removeEventListener("keydown", (e) => keyDown(e));
    };
  }, []);

  function keyDown(e) {
    dispatch({ type: ACTIONS.INCREMENT });
  }

  function createPaddingNumbers(paddingLength, active, keyPrefix) {
    const n = paddingLength - active;
    if (n < 0) return null;

    return [...Array(n)].map((e, idx) => (
      <h1
        style={{
          display: "block",
          minHeight: "43px",
          marginBlockStart: "0.67em",
          marginBlockEnd: "0.67em",
        }}
        key={`${keyPrefix}-${idx}`}
      />
    ));
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div className={styles.mask}>
          <div className={styles.numbers}>
            {createPaddingNumbers(3, state.active, "start")}
            {numbers.map((element, idx) => {
              return (
                Math.abs(state.active - idx) < 4 && (
                  <h1 key={"numbers-" + idx}>{element}</h1>
                )
              );
            })}
            {createPaddingNumbers(
              3,
              state.numbersLength - state.active - 1,
              "end"
            )}
          </div>
          <div className={styles.numbersinput}>
            {createPaddingNumbers(3, state.active, "input")}
            {numbers.map((element, idx) => {
              return (
                state.active - idx >= 0 &&
                state.active - idx <= 3 && (
                  <h1 key={"numbers-" + idx}>{element}</h1>
                )
              );
            })}
            {createPaddingNumbers(3, 0, "end")}
          </div>
        </div>
      </main>
    </div>
  );
}
