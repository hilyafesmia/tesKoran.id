import Head from "next/head";
import cn from "classnames";
import { useState, useEffect, useReducer, useRef } from "react";
import styles from "../styles/Home.module.css";

const ACTIONS = {
  PUSH_ANSWER: "push-answer",
  INCREMENT: "increment",
  DECREMENT: "decrement",
};

export async function getServerSideProps() {
  return {
    props: {
      numbers: Array.from({ length: 25 }, () => Math.floor(Math.random() * 10)),
    },
  };
}

function reducer(state, action) {
  switch (action.type) {
    case ACTIONS.INCREMENT:
      return {
        ...state,
        active: Math.min(state.numbersLength - 1, state.active + 1),
      };
    case ACTIONS.DECREMENT:
      return { ...state, active: Math.max(0, state.active - 1) };
    case ACTIONS.PUSH_ANSWER:
      const newAnswers = state.answers;
      newAnswers[state.active] = action.payload.input;
      return {
        ...state,
        newAnswers,
        active: Math.min(state.numbersLength - 1, state.active + 1),
      };
    default:
      return state;
  }
}

export default function Home({ numbers }) {
  const [state, dispatch] = useReducer(reducer, {
    active: 0,
    numbersLength: numbers.length,
    answers: [...Array(numbers.length)],
  });

  useEffect(() => {
    window.addEventListener("keydown", (e) => keyDown(e));
    return () => {
      window.removeEventListener("keydown", (e) => keyDown(e));
    };
  }, []);

  function keyDown(e) {
    console.log(e);
    switch (true) {
      case e.keyCode == 8 || e.keyCode == 38:
        return dispatch({ type: ACTIONS.DECREMENT });
      case e.keyCode == 13 || e.keyCode == 40:
        return dispatch({ type: ACTIONS.INCREMENT });
      case e.keyCode >= 48 && e.keyCode <= 57:
        if (e.ctrlKey) return;
        if (e.repeat) return;
        return dispatch({
          type: ACTIONS.PUSH_ANSWER,
          payload: { input: e.keyCode - 48 },
        });
      case e.keyCode >= 96 && e.keyCode <= 105:
        if (e.repeat) return;
        if (e.ctrlKey) return;
        return dispatch({
          type: ACTIONS.PUSH_ANSWER,
          payload: { input: e.keyCode - 96 },
        });
    }
  }

  function createPaddingNumbers(paddingLength, active, keyPrefix) {
    const n = paddingLength - active;
    if (n < 0) return null;

    return [...Array(n)].map((e, idx) => (
      <h1 className={styles.paddingElement} key={`${keyPrefix}-${idx}`} />
    ));
  }

  console.log("state.active", state.active);

  const renderedNumbers = numbers.slice(
    Math.max(0, state.active - 2),
    state.active + 4
  );

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div className={styles.mask}>
          <div className={styles.numbers}>
            {createPaddingNumbers(2, state.active, "start")}
            {renderedNumbers.map((element, idx) => {
              return <h1 key={"numbers-" + idx}>{element}</h1>;
            })}
            {createPaddingNumbers(
              3,
              state.numbersLength - state.active - 1,
              "end"
            )}
          </div>

          <div className={styles.numbersinput}>
            {createPaddingNumbers(2, state.active, "input")}
            {state.answers
              .slice(Math.max(0, state.active - 2), state.active + 4)
              .map((element, idx) => {
                return idx !== Math.min(state.active, 2) ? (
                  <h1
                    className={cn({
                      [styles.paddingElement]: element === undefined,
                      [styles.wrong]:
                        element !==
                        (renderedNumbers[idx] + renderedNumbers[idx + 1]) % 10,
                    })}
                    key={"input-" + idx}
                  >
                    {element}
                  </h1>
                ) : (
                  <div className={styles.activeAnswerContainer}>
                    <input
                      autoFocus
                      type="number"
                      className={cn([styles.activeAnswer], {
                        [styles.wrong]:
                          element !==
                          (renderedNumbers[idx] + renderedNumbers[idx + 1]) %
                            10,
                      })}
                      onChange={(e) => (e.target.value = "")}
                      onKeyDown={(e) => (e.target.value = "")}
                      value={element}
                    />
                  </div>
                );
              })}
            {createPaddingNumbers(
              3,
              state.numbersLength - state.active - 1,
              "end"
            )}
          </div>
        </div>
      </main>
    </div>
  );
}
